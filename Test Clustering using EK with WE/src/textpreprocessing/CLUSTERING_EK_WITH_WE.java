/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package textpreprocessing;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import static textpreprocessing.WriteReadFile.WriteTofile;
import static textpreprocessing.WriteReadFile.readTextFile;

/**
 *
 * @author Dess
 */
public class CLUSTERING_EK_WITH_WE extends javax.swing.JFrame {

    /**
     * Creates new form CLUSTERING_EK_WITH_WE
     */
    public CLUSTERING_EK_WITH_WE() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenu1.setText("Preprocess");

        jMenuItem1.setText("Preprocess Text Documents ");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Word Embedding ");

        jMenuItem2.setText("Train Using Word2Vec");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 693, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        
       String []result;
        String checkresult=null;
       int countWord=0;
         String directory = "F:/Encyclopidic Knowlage/Amharic Corpus/preprocessed1/art/";
    for(int j=1;j<230;j++){ 
           try {
               String fname="pol ("+j+").txt";
               String fname1="tel ("+j+").txt";
               String fname2="sp ("+j+").txt";
               String fname3="bibl ("+j+").txt";
               String fname4="art ("+j+").txt";
               String fname5="bus ("+j+").txt";
               String fname6="med ("+j+").txt";
               File myFile = new File(directory+fname1);
               if (myFile.createNewFile()){
                   System.out.println("File is created!");
               }
               
               String location = "F:/Encyclopidic Knowlage/Amharic Corpus/arranged am corpus/arts/"+fname4;
               String input = readTextFile(location);
               input = input.replaceAll("[0-6]","");
               input = input.replaceAll("[8-9]","");
               AmharicStemmer as=new AmharicStemmer();
               result=input.split(" ");
               Normalizer nor = new Normalizer();
               for (int i=0;i<result.length;i++){
                   result[i]=result[i].replace(".","");
                   result[i]=result[i].replace("፡","");
                   result[i]=result[i].replace("።","");
                   result[i]=result[i].replace("፥","");
                   result[i]=result[i].replace("‹‹","");
                   result[i]=result[i].replace("››","");
                   result[i]=result[i].replace("/","");
                   result[i]=result[i].replace("፤","");
                   result[i]=result[i].replace("፣","");
                   result[i]=result[i].replace("(","");
                   result[i]=result[i].replace(")","");
                   result[i]=result[i].replace("?","");
                   result[i]=result[i].replace("፦","");
                   result[i]=result[i].replace("፥","");
                   result[i]=result[i].replace("-","");
                   result[i]=result[i].replace("”","");
                   result[i]=result[i].replace("”","");
                   result[i]=result[i].replace("\"","");
                   result[i]=result[i].replace("\"","");
                   result[i]=result[i].replace("…","");
                   result[i]=result[i].replace(":-","");
                   result[i]=result[i].replace("‹","");
                   result[i]=result[i].replace("›","");
                   result[i]=result[i].replace("!","");
                   result[i]=result[i].replace("!","");
                   result[i]=result[i].trim();
                   result[i]=nor.normalize(result[i]);
                   
               }
               List list = (List) Arrays.asList(result);
               //Remove the stopwords
               
               for (int i =0; i < list.size(); i++){
                   
                   result[i] = as.Stem((String) list.get(i));
                   
               }
               StopwordRemove sw=new StopwordRemove();
               List list1 = (List) Arrays.asList(result);
               List tokensWithOutSW=sw.removeStopWord(list1);
               
               countWord=countWord+result.length;
               
               checkresult=WriteTofile(tokensWithOutSW,fname4);
           } 
           catch (IOException ex) {
               Logger.getLogger(CLUSTERING_EK_WITH_WE.class.getName()).log(Level.SEVERE, null, ex);
           } catch (Exception ex) {
               Logger.getLogger(CLUSTERING_EK_WITH_WE.class.getName()).log(Level.SEVERE, null, ex);
           }
         
         }
     System.out.println("preprocessing result="+checkresult);
        System.out.println("total number of words="+countWord);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CLUSTERING_EK_WITH_WE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CLUSTERING_EK_WITH_WE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CLUSTERING_EK_WITH_WE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CLUSTERING_EK_WITH_WE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CLUSTERING_EK_WITH_WE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    // End of variables declaration//GEN-END:variables
}
